/**
 * @Author: Bi Ying
 * @Date:   2022-05-24 13:48:55
 * @Last Modified by:   Bi Ying
 * @Last Modified time: 2024-05-14 20:10:13
 */
export default {
  lang: 'English',
  meta: {
    'title': 'VectorVein',
    'description': 'A brand new knowledge base + workflow management system',
  },
  router: {
    base: 'VectorVein',
    basic: {
      children: {
        'index': 'Index',
      }
    },
    workspace: {
      children: {
        'workflow_space': 'My workflow space',
        'data_space': 'My data space',
        'workflow_main': 'Workflow main',
        'workflow_use': 'Workflow use',
        'workflow_template': 'Workflow template',
        'database_detail': 'Database detail',
        'database_object_create': 'Database object create',
        'database_object_detail': 'Database object detail',
      }
    },
    account: {
      children: {
        'info': 'My Account Info',
        'settings': 'My Account Settings',
      }
    },
    settings: 'Settings',
  },
  status: {
    'IN': 'Invalid',
    'PR': 'Processing',
    'VA': 'Valid',
    'DE': 'Deleted',
    'EX': 'Expired',
    'INVALID': 'Invalid',
    'EXPIRED': 'Expired',
    'DELETING': 'Deleting',
    'DELETED': 'Deleted',
    'VALID': 'Valid',
    'ERROR': 'Error',
    'CREATING': 'Creating',
    'NOT_STARTED': 'Not started',
    'QUEUED': 'Queued',
    'RUNNING': 'Running',
    'FINISHED': 'Finished',
    'FAILED': 'Failed',
  },
  common: {
    'vector_vein': 'VectorVein',
    'time_length': '{hours} Hours {minutes} Minutes',
    'refresh': 'Refresh',
    'index': 'Index',
    'update_log': 'Update log',
    'my': 'My',
    'all': 'All',
    'all_tags': 'All tags',
    'add': 'Add',
    'edit': 'Edit',
    'create': 'Create',
    'delete': 'Delete',
    'status': 'Status',
    'tags': 'Tags',
    'action': 'Action',
    'output': 'Output',
    'support_inquiries': 'Support inquiries: ',
    'notice': 'Notice',
    'ok': 'OK',
    'save': 'Save',
    'pay_channel': 'Payment method',
    'credits': 'Credits',
    'total_price': 'Total price',
    'total_credits': 'Total credits',
    'bonus_credits': 'Bonus credits',
    'available_credits': 'Available credits',
    'pay': 'Pay',
    'warning': 'Warning',
    'copy_success': 'Copy success',
    'alipay': 'Alipay',
    'wechatpay': 'Wechatpay',
    'create_time': 'Create time',
    'update_time': 'Update time',
    'update_time_format': 'Update time: {time}',
    'back': 'Back',
    'previous_step': 'Previous step',
    'next_step': 'Next step',
    'preview': 'Preview',
    'save_success': 'Save success',
    'card_view': 'Card view',
    'table_view': 'Table view',
    'finish': 'Finish',
    'success': 'Success',
    'cancel': 'Cancel',
    'more_settings': 'More settings',
  },
  email: {
    verify: {
      'email_verify_success': 'Email verify success!',
      'email_verify_success_subtitle': 'Your email has been verified successfully, check the courses now!',
      'check_control_panel': 'Check control panel',
      'email_verify_failed': 'Email verify failed!',
      'email_verify_failed_subtitle': 'There is an error in the verification link, please recheck and refresh.',
      'email_verify_expired_subtitle': 'This link has expired. Please resend the verification email.',
      'resend_email': 'Resend email',
      'email_already_verified': 'Email already verified!',
      'email_already_verified_subtitle': 'This link is verified, please login directly',
      'please_verify_your_email': 'Please verify your email',
      'please_verify_your_email_subtitle': 'To keep your account safe, we need to verify your email address: ',
      'sending_failed': 'Sending failed',
      'too_frequently_resend': 'Your emails are being sent too often, please try again later',
      'sending_successfull': 'Sending successfull',
      'please_relogin_after_verify': 'Please re-login after successful verification',
    }
  },
  userAuth: {
    common: {
      'please_enter': 'Please enter ',
      'username': 'Username',
      'email': 'Email',
      'mobile': 'Mobile',
      'verification_code': 'Verification code',
      'send_verification_code': 'Send verification code',
      'password': 'Password',
      'login': 'Login',
      'logout': 'Logout',
      'or': 'or',
      'register': 'Register',
      'sign_up': 'Sign up',
      'error': 'Server error',
    },
    login: {
      'please_enter_username': 'Please enter username',
      'please_enter_email': 'Please enter email',
      'please_enter_password': 'Please enter password',
      'remember_account': 'Remember me',
      'forget_password': 'Forget password',
      'account_not_exists_title': 'Password incorrect or account not exists',
      'account_not_exists_content': 'Please check if your account password is correct or register a new account.',
      'mobileLogin': 'Mobile login',
      'wechatLogin': 'Wechat login',
      'email_login': 'Email login',
    },
    register: {
      'region_search_or_select': 'Region (search or select)',
      'please_select_your_region': 'Please select your region',
      'human_verification_error': 'Human verification error!',
      'connection_error': 'Connection error!',
      'email_already_exists': 'Email already registered! Please login directly.',
      'username_already_exists': 'Username already used!',
      'register_success': 'Register success! Please verify your email.',
    },
    registerResult: {
      'check_email': 'Check email',
      'back_to_login': 'Back to login',
      'verification_email_sent': 'The activation email has been sent to your email address, and the email is valid for 24 hours. Please log in to your mailbox in time and click the link in the email to activate your account.',
      'your_email_account_register_success': 'Your account {email} registered successfully!',
    },
    forgetPassword: {
      'verify_email': 'Verify email',
      'enter_new_password': 'Enter new password',
      'verify': 'Verify',
      'verification_code_send_success': 'Verification code sent',
      'human_verification_error': 'Human verification error!',
      'connection_error': 'Connection error!',
      'email_not_exists': 'Email not exists!',
      'reset_password': 'Reset password',
      'reset_success': 'Reset success! Please login.',
    }
  },
  userAccount: {
    accountInfo: {
      'my_account': 'My account',
      'my_credits': 'My credits',
    },
    accountSettings: {
      'account_email': 'Account email',
      'account_settings': 'Account settings',
    }
  },
  workspace: {
    workflowSpace: {
      'workflow_index': 'Workflow index',
      'user_fast_access_workflows': 'Fast access workflows',
      'add_new_workflow': 'Add new workflow',
      'new_workflow': 'New workflow',
      'share_workflow': 'Share',
      'clone_workflow': 'Clone',
      'clone_success': 'Clone success',
      'clone_failed': 'Clone failed',
      'add_to_fast_access': 'Add to fast access',
      'add_to_fast_access_confirm': 'Confirm to add the workflow to fast access?',
      'delete_from_fast_access': 'Delete from fast access',
      'delete_from_fast_access_confirm': 'Confirm to delete the workflow from fast access?',
      'add_to_fast_access_success': 'Add to fast access success',
      'add_to_fast_access_failed': 'Add to fast access failed',
      'delete_from_fast_access_success': 'Delete from fast access success',
      'delete_from_fast_access_failed': 'Delete from fast access failed',
      'update_time': 'Update time: {time}',
      'inputs': 'Inputs',
      'outputs': 'Outputs',
      'triggers': 'Triggers',
      'run': 'Run',
      'edit': 'Edit',
      'delete': 'Delete',
      'delete_confirm': 'Confirm to delete the workflow?',
      'delete_success': 'Delete success',
      'delete_failed': 'Delete failed',
      'save_success': 'Save success',
      'save_failed': 'Save failed',
      'workflow_cant_invoke_itself': 'Workflow can\'t invoke itself',
      'get_workflow_failed': 'Get workflow failed',
      'get_workflow_record_failed': 'Get workflow record failed',
      'submit_workflow_success': 'Submit workflow request success',
      'submit_workflow_failed': 'Submit workflow request failed',
      'run_workflow_success': 'Run workflow success',
      'run_workflow_failed': 'Run workflow failed',
      'update_schedule_success': 'Update schedule success',
      'update_schedule_failed': 'Update schedule failed',
      'delete_schedule_trigger_confirm': 'Confirm to delete the schedule trigger?',
      'delete_schedule_success': 'Delete schedule success',
      'delete_schedule_failed': 'Delete schedule failed',
      'brief': 'Brief',
      'field_is_empty': '{field} is empty',
      'record_status': 'Workflow run record status: {status}',
      'record_error_task': 'Error task: {task}',
      'maximize_output': 'Maximize output area',
      'normalize_output': 'Restore output area size',
      'related_workflows': 'Related workflows',
      'diagnosis_workflow_record': 'Diagnosis workflow run record',
      'diagnosis_workflow_record_tip': 'You can now diagnose a specific workflow run record to view the running status, running time, and credit consumption of each node.',
      'more_actions': 'More actions',
    },
    workflowEditor: {
      'exit_not_saved_confirm': 'Workflow not saved, confirm exit?',
      'save_and_exit': 'Save and exit',
      'exit_without_save': 'Exit without save',
      'workflow_info': 'Basic info',
      'workflow_canvas': 'Workflow canvas',
      'workflow_ui_design': 'UI design',
      'tags': 'Tags',
      'brief_info': 'Brief info',
      'brief_images': 'Brief images',
      'edit_code': 'Edit code',
      'workflow_check_warning': 'Workflow check warning',
      'workflow_has_no_inputs': 'Workflow has no inputs (please check the fields you want to display in the use interface)',
      'workflow_has_no_outputs': 'Workflow has no outputs (please drag a node from the output to the canvas and connect it)',
      'workflow_has_no_triggers': 'Workflow has no triggers (please drag a node from the triggers to the canvas and connect it)',
      'workflow_has_cycles': 'The workflow connection has a cycle, please make sure that the connection of each node will not form a cycle',
      'workflow_has_isolated_nodes': 'There are isolated nodes in the workflow, please make sure that all nodes except the trigger node are connected to other nodes',
      'edge_delete_message': 'Press the backspace key on the keyboard or double-click the line to delete',
      'edge_already_connected_message': 'The handle has already connected an edge',
      'diagnosing_record': 'Diagnosing {record}',
      'cannot_save_when_diagnosing': 'Cannot save when diagnosing record',
    },
    workflowSpaceMain: {
      'my_workflows': 'My workflows',
      'workflow_title': 'Workflow',
      'tags': 'Tags',
      'tags_filter': 'Tags filter',
      'update_time': 'Update time',
      'create_workflow': 'Create workflow',
      'official_workflow_template': 'Official workflow template',
      'community_workflow_template': 'Community workflow template',
      'input_search_text': 'Enter the title, brief, etc. to be searched',
      'reset_search': 'Reset',
      'no_workflows_1': 'You have not added or created a workflow yet',
      'no_workflows_2': 'Add a workflow here',
    },
    workflowTemplate: {
      'template': 'Template',
      'add_to_my_workflows': 'Add to my workflows',
      'add_success': 'Add success',
      'add_failed': 'Add failed',
      'author': 'Author: {author}',
      'used_count': '{count} people have used',
      'workflow_template_tags': 'Workflow template tags',
      'edit_template': 'Edit template',
      'update_success': 'Update success',
      'update_failed': 'Update failed',
      'test_run_template': 'Test run template',
      'test_run_template_hint1': 'It is recommended that you add it to your own workflow before running, so that you can save the record and make custom modifications.',
    },
    dataSpace: {
      'create': 'Create',
      'create_success': 'Create success',
      'create_failed': 'Create failed',
      'database_name': 'Database name',
      'status_invalid': 'Invalid',
      'status_expired': 'Expired',
      'status_deleted': 'Deleted',
      'status_valid': 'Valid',
      'status_error': 'Error',
      'status_creating': 'Creating',
      'status_deleting': 'Deleting',
      'delete': 'Delete',
      'delete_confirm': 'Confirm to delete the database? It cannot be restored after deletion!',
      'delete_success': 'Delete success',
      'delete_failed': 'Delete failed',
      'vector_database': 'Vector database',
      'vector_database_description': 'Vector database is a database based on vector retrieval, which can be used to store and retrieve text, images, audio, video and other data.',
      'relational_database': 'Relational database',
      'relational_database_description': 'Relational database is a database based on the relational model, which can be used to store and retrieve structured data.',
    },
    databaseDetail: {
      'add_object': 'Add object',
      'object_title': 'Object title',
      'object_source_url': 'Object source url',
      'object_type': 'Object type',
      'add_method': 'Add method',
      'add_method_url': 'Add from url',
      'add_method_files': 'Upload files',
      'add_method_text': 'Input text',
      'crawl_data_from_url': 'Crawl data from url',
      'use_oversea_crawler': 'Use oversea crawler',
      'object_content': 'Object content',
      'content_empty': 'Content empty!',
      'create_success': 'Add success',
      'create_failed': 'Add failed',
      'delete_success': 'Delete success',
      'delete_failed': 'Delete failed',
      'check_detail_data': 'Check detail data',
      'source_url': 'Source link',
      'data_type': 'Data type',
      'data_type_TEXT': 'Text',
      'data_type_IMAGE': 'Image',
      'data_type_AUDIO': 'Audio',
      'data_type_VIDEO': 'Video',
      'data_type_OTHER': 'Other',
      'delete_confirm': 'Confirm to delete this data?',
      'delete': 'Delete',
      'modify_database_info': 'Modify database info',
      'table': 'Table',
      'table_name': 'Table name',
      'table_status': 'Table status',
      'table_current_rows': 'Current rows',
      'run_sql': 'Run SQL',
      'please_enter_sql': 'Please enter SQL statement conforming to SQLite syntax',
      'failed_to_load_database': 'Failed to load the database, the database may be too large or the file is damaged',
      'sql_success': 'SQL success',
      'affected_rows': 'Affected rows {rows}',
      'max_show_rows': 'Up to 1000 rows of data can be displayed on the page',
      'force_refresh_database': 'Force refresh database',
      'result_n': 'Result {n}',
      'affected_rows': 'Affected rows {rows}',
    },
    databaseObjectCreate: {
      'add_object': 'Add object',
      'add_method': 'Add method',
      'add_method_url': 'Add from url',
      'add_method_files': 'Upload files',
      'add_method_text': 'Input text',
      'split_method': 'Split method',
      'split_method_general': 'General split',
      'split_method_delimeter': 'Delimeter split',
      'split_method_markdown': 'Markdown split',
      'split_method_table': 'Table split',
      'chunk_length': 'Chunk length',
      'remove_url_and_email': 'Remove url and email',
      'use_oversea_crawler': 'Use oversea crawler',
      'object_source_url': 'Object source url',
      'object_files': 'Object files',
      'object_title': 'Object title',
      'object_content': 'Object content',
      'process_rules': 'Process rules',
      'delimiter': 'Delimiter',
      'finish': 'Finish',
      'content_empty': 'Content empty!',
      'create_success': 'Add success',
      'create_failed': 'Add failed',
      question: {
        'chunk_length': {
          '1': 'The chunk length means that the text is divided into segments according to how long it is, for example, 1000 means that every 1000 characters are divided into one segment.',
          '2': 'The vector database will find the most relevant paragraph and return it when searching.',
          '3': 'Note that the paragraph length here is not strictly followed, but is roughly close.',
        },
      },
    },
    databaseObjectDetail: {
      'source_url': 'Source link',
      'segments': 'Segments',
      'full_document': 'Full document',
      'params_info': 'Params info',
      'segment_index': 'Index',
      'segment_text': 'Text',
      'segment_keywords': 'Keywords',
      'segment_tokens': 'Tokens',
      'segment_word_counts': 'Counts',
      'paragraph_counts': 'Paragraph counts',
      'word_counts': 'Word counts',
      'modify_object_info': 'Modify information',
      'object_title': 'Object title',
    },
    databaseTableCreate: {
      'add_table': 'Add table',
      'add_method': 'Add method',
      'add_method_table_file': 'Upload file',
      'add_method_manual': 'Manual input',
      'add_method_sql': 'SQL import',
      'table_name': 'Table name',
      'sql_statement': 'SQL statement',
      'sql_statement_too_long': 'SQL statement is too long, please use the file upload method to upload the SQL file.',
      'table_schema': 'Table schema',
      'get_table_schema': 'Get table schema',
      'column_name': 'Column name',
      'column_type': 'Column type',
      'max_length': 'Max length',
      'type_INTEGER': 'Integer',
      'type_REAL': 'Real',
      'type_TEXT': 'Text',
      'type_VARCHAR': 'Varchar',
      'type_BOOLEAN': 'Boolean',
      'type_DATETIME': 'Datetime',
      'add_column': 'Add column',
      'sql_statement_empty': 'SQL statement cannot be empty',
      'table_name_empty': 'Table name cannot be empty',
      'table_schema_empty': 'Table schema cannot be empty',
      'uploaded_files': 'Uploaded files',
      'table_name_already_exists': 'Table name already exists',
      'not_enough_quota': 'Not enough tables\' quota',
      'upload_file_alert_title': 'Please upload data files within 100M',
      'upload_file_alert_description': 'To process data more accurately, please ensure that the first row of the table is the header, and each row from the second row is a piece of data, and there are no merged cells in the table.',
      'no_space_in_column_name': 'Column names cannot contain spaces',
    },
    databaseTableRecord: {
      'sheet': 'Sheet',
      'load_data': 'Load data',
      'delete_records_confirm': 'Confirm to delete the selected records?',
      'add_record': 'Add record',
      'current_rows_max_rows': 'Current rows / Max rows',
      'force_refresh_table': 'Force refresh table',
    },
  },
  components: {
    layout: {
      basicHeader: {
        'workflow_space': 'Workflow',
        'data_space': 'Data',
        'opensource_code': 'Open source code',
        'setting': 'Setting',
      },
      helpDropdown: {
        'help': 'Help',
        'about': 'About',
        'documentation': 'Documentation',
        'software_update': 'Software update',
        'check_update': 'Check update',
        'update_available': 'Update available',
        'new_version': 'New version {version} {releaseDatetime}',
        'about_vectorvein': 'About VectorVein',
        'about_vectorvein_description': '### Build Your Automated Workflow with the Power of AI\n#### Create powerful workflows with drag-and-drop functionality, no programming required.\n\nThe open-source version of VectorVein, developed by MakerBi, is available for personal use only and cannot be used for commercial purposes.',
      },
    },
    markdownEditor: {
      'raw_text': 'Raw text',
      'markdown_text': 'Markdown text',
    },
    workspace: {
      workflowEditor: {
        'add_node': 'Add node',
        'add_tag': 'Add tag',
        'brief_editor': 'Brief editor',
        'brief_images': 'Brief images',
      },
      myWorkflows: {
        'input_search_text': 'Enter the title, brief, etc. to be searched',
        'reset_search': 'Reset',
        'no_workflows_1': 'You have not added or created a workflow yet',
        'no_workflows_2': 'Add a workflow here',
      },
      relatedWorkflowsModal: {
        'title': 'Related workflows that are indirectly called',
      },
      uiDesign: {
        'typography-paragraph': {
          'title': 'Text Content',
          'placeholder': 'Supports Markdown syntax, which will be rendered directly in the interface',
          'tip': 'Can be used to place tips in the interface',
        }
      },
      uploaderFieldUse: {
        'upload': 'Select file',
        'upload_success': '{file} selected',
        'upload_failed': '{file} upload failed',
        'uploader_text': 'Click or drag file to this area to upload',
        'uploader_hint': 'Currently supported file types: {fileTypes}',
      },
      mindmapRenderer: {
        'download_svg': 'Download svg',
      },
      echartsRenderer: {
        'download_image': 'Download image',
      },
      newWorkflowModal: {
        'create_new_workflow': 'Create new workflow',
        'empty_workflow': 'Create empty workflow',
      },
      tagInput: {
        'select_tags': 'Select tags',
      },
      workflowRunRecordsDrawer: {
        'workflows_run_records': 'Workflows records',
        'my_workflows_run_records': 'My workflows run records',
        'start_time': 'Start',
        'end_time': 'End',
        'run_time': 'Run time',
        'used_credits': 'Used credits',
        'status': 'Status',
        'status_not_started': 'Not started',
        'status_queued': 'Queued',
        'status_running': 'Running',
        'status_finished': 'Finished',
        'status_failed': 'Failed',
        'status_stopping': 'Stopping',
        'status_stopped': 'Stopped',
        'check_record': 'Check record',
        'check_record_and_error_task': 'Check record and error task',
        'workflow_title': 'Workflow title',
      },
      vueFlowStyleSettings: {
        'title': 'Style Settings',
        'edge_type': 'Edge type',
        'edge_type_bezier': 'Bezier',
        'edge_type_step': 'Step',
        'edge_type_smoothstep': 'Smoothstep',
        'edge_type_straight': 'Straight',
        'edge_animated': 'Edge animated',
      },
      agentInvokeDataEdit: {
        'agent_invoke': 'Agent invoke',
        'tool_name': 'Tool name',
        'tool_name_required': 'Tool name required',
        'tool_name_tip': 'Can be understood as the function name of the workflow, which can only be numbers, letters, underscores, and hyphens, no more than 64 characters.',
        'tool_name_placeholder': 'Please enter the tool name, which can only be numbers, letters, underscores, and hyphens.',
        'tool_name_error': 'Tool name can only be numbers, letters, underscores, and hyphens, no more than 64 characters',
        'tool_description': 'Tool description',
        'tool_description_tip': 'Used to let AI recognize the function of the tool. The function of the tool should be described as clearly and concisely as possible, especially the input and output.',
        'tool_description_placeholder': 'Please enter a tool description to let the AI recognize the function of the tool.',
        'parameters': 'Parameters',
        'parameter_name': 'Parameter name',
        'parameter_description': 'Parameter description',
        'parameter_required': 'Parameter required',
      },
    },
    codeEditorModal: {
      'title': 'Code editor',
      'please_enter_code': 'Please enter the code, the function name is fixed to main, and the input parameters should be consistent with the set name.',
      'copy_code': 'Copy code',
      'copy_success': 'Copy success',
    },
    templateEditorModal: {
      'title': 'Template editor',
      'variable_fields': 'Variable fields',
      'template': 'Template',
      'drag_to_insert': 'Drag to insert',
    },
    nodes: {
      common: {
        'input': 'Input',
        'output': 'Output',
      },
      baseNode: {
        'document_link': 'Document link',
        'clone_node': 'Clone node',
        'delete_node': 'Delete node',
        'run_time': 'Run time {time}s',
        'no_run_record': 'No run record',
      },
      baseField: {
        'show_in_use_interface': 'Whether to display in the use interface',
        'show': 'Show',
        'hide': 'Hide',
      },
      listField: {
        'add_item': 'Add item',
      },
      assistedNodes: {
        'title': 'Assisted nodes',
        CommentNode: {
          'title': 'Comment node',
          'description': 'Used to add comments, will not have any effect on the workflow run.',
          'comment': 'Comment',
        },
      },
      fileProcessing: {
        'title': 'File processing',
        FileLoader: {
          'title': 'Read file',
          'description': 'Read the contents of the file.',
          'files': 'File',
          'output': 'Output',
        },
      },
      textProcessing: {
        title: 'Text processing',
        TemplateCompose: {
          'title': 'Template compose',
          'description': 'Compose the text according to the template.',
          'template': 'Template',
          'output': 'Output',
          'add_field': 'Add field',
          'add_field_type': 'Add field type',
          'field_type_input': 'Single line input box',
          'field_type_textarea': 'Multi-line input box',
          'field_type_select': 'List selection input',
          'add_field_display_name': 'Display name',
          'add_field_list_options': 'List options',
          'click_to_add_to_template': 'Click to add variables to the template',
          'open_template_editor': 'Open template editor',
          'edit_field': 'Edit field',
          'name_reserved': 'template/output is a reserved keyword and cannot be used as a variable name.',
        },
        MarkdownToHtml: {
          'title': 'Markdown to HTML',
          'description': 'Convert Markdown to HTML.',
          'markdown': 'Markdown',
          'html': 'HTML',
        },
        TextSplitters: {
          'title': 'Text splitters',
          'description': 'Split the text into multiple texts according to the specified method.',
          'text': 'Text',
          'split_method': 'Split method',
          'split_method_general': 'General',
          'split_method_delimiter': 'Delimiter',
          'split_method_markdown': 'Markdown',
          'delimiter': 'Delimiter',
          'chunk_length': 'Chunk length',
          'chunk_overlap': 'Chunk overlap',
          'output': 'Output',
        },
        ListRender: {
          'title': 'List render',
          'description': 'Render the list into text.',
          'list': 'List',
          'add_item': 'Add item',
          'separator': 'Merge item separator',
          'output_type': 'Output type',
          'output_type_text': 'Text',
          'output_type_list': 'List',
          'output': 'Output',
        },
        TextInOut: {
          'title': 'Text in/out',
          'description': 'Output the input text as it is. Used when the same text is needed in multiple places.',
          'text': 'Text',
          'edit_name': 'Edit display name',
          'output': 'Output',
        },
        TextTruncation: {
          'title': 'Text truncation',
          'description': 'Truncate the text to the specified length.',
          'text': 'Text',
          'truncate_method': 'Truncate method',
          'truncate_method_general': 'General truncation',
          'truncate_method_markdown': 'Markdown truncation',
          'truncate_length': 'Truncate length',
          'floating_range': 'Floating range',
          'output': 'Output',
        },
      },
      llms: {
        title: 'Language models',
        common: {
          'use_function_call': 'Use function call',
          'functions': 'Functions',
          'function_call_mode': 'Function call mode',
          'add_function': 'Add function',
          'function_name': 'Function name',
          'function_description': 'Function description',
          'function_parameters': 'Function parameters',
          'function_required_parameters': 'Required parameters',
          'add_parameter': 'Add parameter',
          'parameter_name': 'Name',
          'parameter_description': 'Description',
          'parameter_type': 'Type',
          'response_format': 'Response format',
          'array_configuration_mode': 'Array configuration mode',
          'array_configuration_mode_simple': 'Simple configuration',
          'array_configuration_mode_manual': 'Manual configuration',
          'array_items_type': 'Array items type',
          'array_items_manual_schema': 'Items JSON Schema',
          'array_items_manual_schema_error': 'Items JSON Schema error',
          'object_items_manual_schema': 'Object JSON Schema',
          'object_items_manual_schema_error': 'Object JSON Schema error',
          'prompt': 'Prompt',
          'llm_model': 'Model',
          'temperature': 'AI preference (temperature)',
          'creative': 'Creative',
          'balanced': 'Balanced',
          'precise': 'Precise',
          'output': 'Output',
          'function_call_output': 'Function call output',
          'function_call_arguments': 'Function call arguments',
        },
        OpenAI: {
          'title': 'OpenAI',
          'description': 'OpenAI is a non-profit artificial intelligence research company founded in 2015 by Elon Musk, Sam Altman, and Greg Brockman. It is dedicated to ensuring that artificial general intelligence benefits all of humanity.',
          'use_function_call': 'Use function call',
          'functions': 'Functions',
          'function_call_mode': 'Function call mode',
          'add_function': 'Add function',
          'function_name': 'Function name',
          'function_description': 'Function description',
          'function_parameters': 'Function parameters',
          'function_required_parameters': 'Required parameters',
          'add_parameter': 'Add parameter',
          'parameter_name': 'Name',
          'parameter_description': 'Description',
          'parameter_type': 'Type',
          'response_format': 'Response format',
          'response_format_warning': 'Only gpt-4-1106-preview or gpt-3.5-turbo-1106 support JSON response format, the model has been forcibly modified to gpt-3.5-turbo-1106',
          'array_configuration_mode': 'Array configuration mode',
          'array_configuration_mode_simple': 'Simple configuration',
          'array_configuration_mode_manual': 'Manual configuration',
          'array_items_type': 'Array items type',
          'array_items_manual_schema': 'Items JSON Schema',
          'array_items_manual_schema_error': 'Items JSON Schema error',
          'object_items_manual_schema': 'Object JSON Schema',
          'object_items_manual_schema_error': 'Object JSON Schema error',
          'prompt': 'Prompt',
          'llm_model': 'Model',
          'temperature': 'AI preference (temperature)',
          'creative': 'Creative',
          'balanced': 'Balanced',
          'precise': 'Precise',
          'output': 'Output',
          'function_call_output': 'Function call output',
          'function_call_arguments': 'Function call arguments',
        },
        ChatGLM: {
          'title': 'ChatGLM',
          'description': 'ChatGLM series models, through the injection of code pre-training, supervised fine-tuning and other technologies to align human intentions, with question and answer, multi-round dialogue, code generation and other capabilities.',
          'prompt': 'Prompt',
          'llm_model': 'Model',
          'temperature': 'AI preference (temperature)',
          'creative': 'Creative',
          'balanced': 'Balanced',
          'precise': 'Precise',
          'output': 'Output',
        },
        Moonshot: {
          'title': 'Moonshot',
          'description': 'Moonshot is a 100 billion parameter-level large model of "MoonShot AI" company.',
          'prompt': 'Prompt',
          'llm_model': 'Model',
          'temperature': 'AI preference (temperature)',
          'creative': 'Creative',
          'balanced': 'Balanced',
          'precise': 'Precise',
          'output': 'Output',
        },
        Claude: {
          'title': 'Claude',
          'description': 'Claude is a large language model developed by Antropic, trained to give helpful and harmless responses.',
          'prompt': 'Prompt',
          'llm_model': 'Model',
          'temperature': 'AI preference (temperature)',
          'creative': 'Creative',
          'balanced': 'Balanced',
          'precise': 'Precise',
          'output': 'Output',
        },
        LocalLlm: {
          'title': 'Local LLM',
          'description': 'User-defined large language model interface',
          'prompt': 'Prompt',
          'model_family': 'Model family',
          'llm_model': 'Model',
          'temperature': 'AI preference (temperature)',
          'creative': 'Creative',
          'balanced': 'Balanced',
          'precise': 'Precise',
          'output': 'Output',
        },
      },
      imageGeneration: {
        title: 'Image generation',
        StableDiffusion: {
          'title': 'Stable Diffusion',
          'description': 'Stable Diffusion is a deep learning text-to-image generation model released in 2022.',
          'prompt': 'Prompt',
          'negative_prompt': 'Negative prompt',
          'model': 'Model',
          'cfg_scale': 'CFG Scale',
          'sampler': 'Sampler',
          'width': 'Width',
          'height': 'Height',
          'size': 'Size',
          'aspect_ratio': 'Aspect ratio',
          'output_type': 'Output type',
          'output_type_only_link': 'Only link',
          'output_type_markdown': 'Markdown',
          'output_type_html': 'HTML',
          'output': 'Output',
        },
      },
      outputs: {
        title: 'Outputs',
        Text: {
          'title': 'Text',
          'description': 'Used to present text in the user interface.',
          'text': 'Text content',
          'output_title': 'Text title',
          'output_title_tip': 'Used to distinguish modules in the use interface',
          'render_markdown': 'Render Markdown',
          'output': 'Output',
        },
        Email: {
          'title': 'Email',
          'description': 'Used to send emails.',
          'to_email': 'To email',
          'subject': 'Subject',
          'content_html': 'Content HTML',
        },
        Document: {
          'title': 'Document',
          'description': 'Used to generate documents.',
          'file_name': 'File name',
          'content': 'Content (text type is recommended to enter Markdown format content)',
          'export_type': 'Export type',
          'output_type': 'Output type',
          'output_type_only_path': 'Only path',
          'output_type_markdown': 'Markdown',
          'output_type_html': 'HTML',
          'show_local_file': 'Show local file',
          'output': 'Output',
        },
        Audio: {
          'title': 'Audio',
          'description': 'Used to generate audio files.',
          'content': 'Content',
          'show_player': 'Show player',
          'output_type': 'Output type',
          'output_type_only_link': 'Only link',
          'output_type_markdown': 'Markdown',
          'output_type_html': 'HTML',
          'show_local_file': 'Show local file',
          'output': 'Output',
        },
        Mindmap: {
          'title': 'Mindmap',
          'description': 'Used to generate mind maps.',
          'content': 'Markdown content',
          'show_mind_map': 'Show mind map',
          'output_type': 'Output type',
          'output': 'Output',
        },
        Mermaid: {
          'title': 'Mermaid',
          'description': 'Used to generate Mermaid diagrams.',
          'content': 'Mermaid content',
          'show_mermaid': 'Show Mermaid diagram',
          'output_type': 'Output type',
          'output': 'Output',
        },
        Echarts: {
          'title': 'Charts',
          'description': 'Used to generate Echarts charts.',
          'option': 'Echarts option',
          'show_echarts': 'Show Echarts',
          'output_type': 'Output type',
          'output': 'Output',
        },
        WorkflowInvokeOutput: {
          'title': 'Workflow invoke output',
          'description': 'Used to display the output when called by the workflow invoke node, not displayed in the use interface.',
          'value': 'Value',
          'display_name': 'Display name',
        },
      },
      webCrawlers: {
        title: 'Web crawlers',
        TextCrawler: {
          'title': 'Text crawler',
          'description': 'Used to crawl text from web pages.',
          'url': 'URL',
          'output_type': 'Output type',
          'text': 'Text',
          'json': 'JSON',
          'use_oversea_crawler': 'Use crawler outside China',
          'output_text': 'Web page text',
          'output_title': 'Web page title',
        },
        BilibiliCrawler: {
          'title': 'Bilibili crawler',
          'description': 'Used to crawl videos from Bilibili.',
          'url_or_bvid': 'URL or BVID',
          'download_video': 'Download video',
          'output_type': 'Output type',
          'output_type_str': 'String',
          'output_type_list': 'List',
          'str': 'String',
          'list': 'List',
          'output_subtitle': 'Subtitle',
          'output_title': 'Title',
          'output_video': 'Video',
        },
        YoutubeCrawler: {
          'title': 'Youtube ',
          'description': 'Used to crawl videos from youtube.',
          'url_or_video_id': 'URL or video ID',
          'get_comments': 'Get comments',
          'comments_type': 'Comments output format',
          'comments_type_text_only': 'Text only',
          'comments_type_detailed': 'Detailed',
          'output_type': 'Output type',
          'str': 'String',
          'list': 'List',
          'output_subtitle': 'Subtitle',
          'output_title': 'Title',
          'output_comments': 'Comments',
        },
      },
      triggers: {
        title: 'Triggers',
        ButtonTrigger: {
          'title': 'Button trigger',
          'description': 'Used to trigger workflow runs. As a special node, it can be used without connecting to other nodes.',
          'button_text': 'Button text',
          'run': 'Run',
          'output': 'Output',
        },
        ScheduleTrigger: {
          'title': 'Scheduled Trigger',
          'description': 'Used to trigger workflow runs at specified times.',
          'schedule': 'Schedule',
          'schedule_settings': 'Schedule settings',
          'save_schedule_settings': 'Save schedule settings',
          'output': 'Output',
        },
      },
      vectorDb: {
        title: 'Vector database',
        AddData: {
          'title': 'Add data',
          'description': 'Used to add data to the vector database.',
          'text': 'Text',
          'content_title': 'Title',
          'source_url': 'Source URL',
          'data_type': 'Data type',
          'database': 'Database',
          'split_method': 'Split method',
          'split_method_general': 'General',
          'split_method_delimiter': 'Delimiter split',
          'split_method_markdown': 'Markdown split',
          'split_method_table': 'Table split',
          'chunk_length': 'Chunk length',
          'chunk_overlap': 'Chunk overlap',
          'delimiter': 'Delimiter',
          'remove_url_and_email': 'Remove URL and email',
          'wait_for_processing': 'Wait for processing to complete',
          'output': 'Output',
          'object_id': 'Object ID',
        },
        DeleteData: {
          'title': 'Delete data',
          'description': 'Used to delete data from the vector database.',
          'object_id': 'Object ID',
          'database': 'Database',
          'delete_success': 'Delete success',
        },
        Search: {
          'title': 'Search data',
          'description': 'Used to search for data in the vector database. The search results are sorted by similarity.',
          'search_text': 'Search text',
          'data_type': 'Data type',
          'database': 'Database',
          'count': 'Search results count',
          'output_type': 'Output type',
          'text': 'Text',
          'list': 'List',
          'output': 'Output',
        },
      },
      relationalDb: {
        title: 'Relational Database',
        SmartQuery: {
          'title': 'Smart Query',
          'description': 'Use natural language to query the database.',
          'query': 'Query Content',
          'model': 'LLM Model',
          'database': 'Database',
          'tables': 'Tables',
          'load_tables': 'Load Tables',
          'select_all_if_empty': 'If empty, select all tables in the database. It is recommended to only select the necessary tables for more accurate results.',
          'select_database': 'Please Select Database',
          'use_sample_data': 'Use Sample Data',
          'use_sample_data_tip': 'Check this option to provide a table data as a prompt content, which is convenient for AI to refer to the data format. Although it increases the length of the prompt, it can obtain more accurate results.',
          'include_column_names': 'Include Column Names',
          'include_column_names_tip': 'When enabled, the output will include column names',
          'max_count': 'Maximum Return Quantity',
          'output_type': 'Output Type',
          'output_type_list': 'List',
          'output_type_markdown': 'Markdown Table',
          'output_type_csv': 'CSV Format Text',
          'output': 'Output',
          'output_query_sql': 'SQL query statement',
        },
        GetTableInfo: {
          'title': 'Get Table Information',
          'description': 'Used to obtain information about database tables.',
          'database': 'Database',
          'tables': 'Tables',
          'load_tables': 'Load Tables',
          'select_all_if_empty': 'If empty, select all tables in the database. It is recommended to only select the necessary tables for more accurate results.',
          'select_database': 'Please Select Database',
          'output_sql': 'SQL Output',
          'output_sql_tip': 'Output the table structure in CREATE TABLE statement',
          'output_json': 'JSON Output',
          'output_markdown': 'Markdown Output',
        },
        RunSql: {
          'title': 'Run SQL',
          'description': 'Used to run SQL statements within the user\'s own database.',
          'database': 'Database',
          'sql': 'SQL Statement',
          'read_only': 'Read-Only Operation',
          'read_only_tip': 'When enabled, no modifications will be made to the database tables',
          'include_column_names': 'Include Column Names',
          'include_column_names_tip': 'When enabled, the output will include column names',
          'max_count': 'Maximum Return Quantity',
          'output_type': 'Output Type',
          'output_type_list': 'List',
          'output_type_markdown': 'Markdown Table',
          'output_type_csv': 'CSV Format Text',
          'output': 'Output',
        },
      },
      tools: {
        title: 'Tools',
        ProgrammingFunction: {
          'title': 'Programming function',
          'description': 'Used to run code.',
          'language': 'Language',
          'code': 'Code',
          'open_editor': 'Open code editor',
          'add_parameter': 'Add parameter',
          'add_parameter_type': 'Parameter type',
          'parameter_name_reserved': 'language/code/output/use_oversea_node/list_input/error_msg are reserved keywords and cannot be used as parameter names.',
          'parameter_type_str': 'String',
          'parameter_type_int': 'Integer',
          'parameter_type_float': 'Float',
          'parameter_type_bool': 'Boolean',
          'parameter_type_list': 'List',
          'parameter_type_dict': 'Dict',
          'add_parameter_name': 'Parameter name',
          'use_oversea_node': 'Use node outside China',
          'list_input': 'List input',
          'output': 'Return value',
          "console_msg": "Console message",
          'error_msg': 'Error message',
          'files': 'Generated files',
        },
        ImageSearch: {
          'title': 'Image search',
          'description': 'Used to search for images on the Internet.',
          'search_text': 'Search text',
          'search_engine': 'Search engine',
          'search_engine_bing': 'Bing',
          'search_engine_pexels': 'Pexels',
          'count': 'Search results count',
          'output_type': 'Output type',
          'output_type_text': 'Text',
          'output_type_markdown': 'Markdown',
          'output': 'Output',
        },
        WorkflowInvoke: {
          'title': 'Workflow invoke',
          'description': 'Used to invoke the workflow and get the result.',
          'select_workflow': 'Select workflow',
          'selected_workflow': 'Selected workflow',
          'workflow_id': 'Workflow ID',
          'fail_all': 'If this node fails, the entire workflow fails',
          'list_input': 'List input',
          'workflow_fields': 'Workflow fields',
        },
      },
      controlFlows: {
        title: 'Control flows',
        Empty: {
          'title': 'Empty node',
          'description': 'Used in cases where it is necessary to ensure that the workflow is executed in order.',
          'input': 'Input',
          'output': 'Output (does not change the value of the connected node)',
        },
        Conditional: {
          'title': 'Conditional',
          'description': 'Used to execute different modules according to different conditions.',
          'field_type': 'Data type',
          'field_type_string': 'String',
          'field_type_number': 'Number',
          'left_field': 'Left data',
          'right_field': 'Right data',
          'operator': 'Condition judgment operator',
          'operator_equal': 'Equal',
          'operator_not_equal': 'Not equal',
          'operator_greater_than': 'Greater than',
          'operator_less_than': 'Less than',
          'operator_greater_than_or_equal': 'Greater than or equal',
          'operator_less_than_or_equal': 'Less than or equal',
          'operator_include': 'Left include right',
          'operator_not_include': 'Left not include right',
          'operator_is_empty': 'Is empty',
          'operator_is_not_empty': 'Is not empty',
          'operator_starts_with': 'Left starts with right',
          'operator_ends_with': 'Left ends with right',
          'true_output': 'Output when the condition is met',
          'false_output': 'Output when the condition is not met',
          'output': 'Output',
        },
        RandomChoice: {
          'title': 'Random choice',
          'description': 'Used to randomly select an element from a list.',
          'input': 'Input',
          'output': 'Output',
        },
        JsonProcess: {
          'title': 'JSON process',
          'description': 'Used to process JSON or Python dictionary data.',
          'input': 'Input',
          'process_mode': 'Process mode',
          'process_mode_get_value': 'Get value by Key',
          'process_mode_get_multiple_values': 'Get multiple values by Keys',
          'process_mode_list_values': 'List all values',
          'process_mode_list_keys': 'List all keys',
          'key': 'Key',
          'keys': 'Keys',
          'add_key': 'Add key',
          'default_value': 'Default value (when Key does not exist)',
          'output': 'Output',
        },
      },
      mediaProcessing: {
        title: 'Media processing',
        GptVision: {
          'title': 'GPT-Vision',
          'description': 'GPT with vision, allowing the model to receive images and answer questions about them.',
          'text_prompt': 'Text prompt',
          'images_or_urls': 'Images or URLs',
          'images': 'Images',
          'urls': 'URLs',
          'detail_type': 'Detail type',
          'detail_type_auto': 'Auto',
          'detail_type_low': 'Low',
          'detail_type_high': 'High',
          'output': 'Output',
        },
        GlmVision: {
          'title': 'GLM-Vision',
          'description': 'Realized the deep fusion of visual language features, supporting various image understanding tasks such as visual question answering, image subtitles, visual positioning, and complex object detection.',
          'text_prompt': 'Text prompt',
          'images': 'Images',
          'urls': 'URLs',
          'images_or_urls': 'Images or URLs',
          'images_or_urls_images': 'Images',
          'images_or_urls_urls': 'URLs',
          'output': 'Output',
        },
      },
    },
    copyButton: {
      'click_to_copy': 'Click to copy',
      'copy_success': 'Copy success',
    },
    inputSearch: {
      input_search_text: 'Search',
    },
  },
  layouts: {
    workspaceLayout: {
      tour: {
        'workflow_button_title': 'Switch to workflow interface',
        'workflow_button_description': 'Click this button to switch to the workflow interface. Your workflows and official templates can be found here.',
        'database_button_title': 'Switch to database interface',
        'database_button_description': 'Click this button to switch to the database interface. You can create your personal knowledge base here and upload your data for use in workflows.',
      },
    },
  },
  settings: {
    'llms': 'Language Models',
    'other': 'Other',
    'open': 'Open setting',
    'close': 'Close setting',
    'save': 'Save setting',
    'save_success': 'Save success',
    'my_setting': 'My setting',
    'openai_api_type': 'OpenAI API type',
    'openai': 'OpenAI',
    'azure': 'Azure',
    'openai_api_key': 'OpenAI API Key',
    'openai_api_base': 'OpenAI API Base',
    'azure_api_key': 'Azure API Key',
    'azure_endpoint': 'Azure Endpoint',
    'azure_gpt_35_deployment_id': 'Azure GPT-3.5 Deployment ID',
    'azure_gpt_4_deployment_id': 'Azure GPT-4 Deployment ID',
    'azure_gpt_4v_deployment_id': 'Azure GPT-4-Vison Deployment ID',
    'openai_embedding_engine': 'Azure Embedding Deployment ID',
    'chatglm6b_api_base': 'ChatGLM-6B API Base',
    'moonshot_api_base': 'Moonshot API Base',
    'moonshot_api_key': 'Moonshot API Key',
    'zhipuai_api_base': 'ZhiPu AI API Base',
    'zhipuai_api_key': 'ZhiPu AI API Key',
    'anthropic_api_base': 'Anthropic API Base',
    'anthropic_api_key': 'Anthropic API Key',
    'local_llms': 'Local LLMs',
    'model_family_api_base': 'Model family API Base',
    'model_family_api_key': 'Model family API Key',
    'model_family': 'Model family name',
    'models': 'Models',
    'model_label': 'Model label',
    'model_id': 'Model ID',
    'model_rpm': 'RPM (requests per minute)',
    'model_concurrent': 'Concurrency',
    'model_max_tokens': 'Context length',
    'add_model_family': 'Add model family',
    'add_model': 'Add model',
    'save_model_family': 'Save model family',
    'output_folder': 'Output folder',
    'select_folder': 'Select folder',
    'email_settings': 'Email settings',
    'email_user': 'Email user',
    'email_password': 'Email password',
    'email_smtp_host': 'SMTP host',
    'email_smtp_port': 'SMTP port',
    'email_smtp_ssl': 'SMTP SSL',
    'pexels_api_key': 'Pexels API Key',
    'stable_diffusion_base_url': 'Stable Diffusion URL',
    'use_system_proxy': 'Use system proxy',
  },
}
